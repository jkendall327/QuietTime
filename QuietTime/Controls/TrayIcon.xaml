<UserControl x:Class="QuietTime.Controls.TrayIcon"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:QuietTime.Controls" 
             xmlns:other="clr-namespace:QuietTime.Other" 
             xmlns:hardcodet="http://www.hardcodet.net/taskbar" 
             xmlns:viewmodels="clr-namespace:QuietTime.ViewModels" 
             d:DataContext="{d:DesignInstance Type=viewmodels:TrayIconVM}"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <BitmapImage x:Key="Icon" UriSource="../Resources/icon.ico" />
    </UserControl.Resources>

    <hardcodet:TaskbarIcon Name="test" ToolTipText="QuietTime" IconSource="{StaticResource Icon}" DoubleClickCommand="{Binding ShowAppCommand}">
        
        <!--context menus aren't part of the same visual tree and ergo don't inherit datacontext-->
        <!--we have to use a proxy class that inherits from Freezeable to get the effect we want-->
        <!--https://thomaslevesque.com/2011/03/21/wpf-how-to-bind-to-data-when-the-datacontext-is-not-inherited/-->
        <hardcodet:TaskbarIcon.Resources>
            <other:BindingProxy x:Key="proxy" Data="{Binding}"/>
        </hardcodet:TaskbarIcon.Resources>
        
        <hardcodet:TaskbarIcon.ContextMenu>
            <ContextMenu DataContext="{Binding Path=Data, Source={StaticResource proxy}}">

                <TextBlock Text="{Binding CurrentVolume, StringFormat=Current volume: {0}}"/>
                <TextBlock Text="{Binding MaxVolume, StringFormat=Current max: {0}}"/>
                
                <Separator/>

                <MenuItem Header="Show main window" Command="{Binding ShowAppCommand}"/>
                <MenuItem Header="Exit QuietTime" Command="{Binding CloseAppCommand}"/>

            </ContextMenu>
        </hardcodet:TaskbarIcon.ContextMenu>
    </hardcodet:TaskbarIcon>
    
</UserControl>
